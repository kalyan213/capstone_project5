# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
#
version:  2.1
jobs:
  lint_check:
    docker:
    # Use the same Docker base as the projectttt
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv devops
            . devops/bin/activate
            make install
            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . devops/bin/activate
            make lint
  # building the docker app
  build_docker_app:
    environment:
      IMAGE_VERSION:  v2
    docker:
      - image: circleci/golang:1.15
     
    steps:
      - checkout
      - setup_remote_docker

      # Build the image and push Docker image
      - run:
          name: Build Docker Image
          command: |
            docker system prune -af
            sleep 5
            docker build -t $IMAGE_NAME:$IMAGE_VERSION .
            sleep 5
      - run:
          name: List Docker Image
          command: |
            docker image ls
      - run:
          name: Push Docker Image
          command: |
            docker images
            sudo docker logout
            docker images
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            image_ids=`docker images | grep $IMAGE_NAME | awk '{print $3}'`
            echo $image_ids
            docker images
            docker tag $image_ids $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_VERSION
            docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_VERSION
            docker images
            
  eks_cluster_deploy:
    docker:
      - image: python:3.7.3-stretch
      
    steps:
      - checkout
      - run:
          name: Install awscli
          command: |
            pip3 install awscli

      - run:
          name: Install aws-iam-authenticator
          command: |
            # curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
            curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
            chmod +x ./aws-iam-authenticator
            mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
            # mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            # echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            # aws-iam-authenticator help
            

      
      - run:
          name: Install eksctl
          command: |
            # curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            # mv /tmp/eksctl /usr/local/bin
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version


      - run:
          name: Install kubectl
          command: |
            # curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            # chmod +x ./kubectl
            # mv ./kubectl /usr/local/bin/kubectl
            # curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl
            # curl -o kubectl.sha256 https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl.sha256
            # openssl sha1 -sha256 kubectl
            # chmod +x ./kubectl
            # mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            # echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            # kubectl version --short --client
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Creating an EKS cluster.
          command: |
            # aws cloudformation list-exports > cluster.txt
            # cat cluster.txt
            # if [ $(grep -i "$EKSCLUSTER_NAME" cluster.txt | wc -l) -ge 1 ]
            #   then
            #   echo "already EKS Cluster exists in environment"
            #   echo "deleting the EKS cluster..."
            #   aws eks list-clusters
            # #   else
            #   echo "creating the EKS Cluster"
            #   eksctl create cluster --name $EKS_CLUSTER_NAME --version 1.20 --region $AWS_DEFAULT_REGION --zones us-east-1a,us-east-1b,us-east-1c --nodegroup-name eks_capstone_grp --node-type t2.micro --nodes-min 2 --nodes-max 4 --managed
            #   aws eks list-clusters            
            # fi
            export TERM=xterm
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
            aws cloudformation list-exports > cluster.txt
            if kubectl config get-clusters | grep -q ${EKS_CLUSTER_NAME}; then
                echo
                echo "Cluster '${EKS_CLUSTER_NAME}' already exists!"
                echo
            else
                echo
                echo "Creating cluster..."
                
                eksctl create cluster --name $EKS_CLUSTER_NAME --version 1.21 --region $AWS_DEFAULT_REGION --zones us-east-1a,us-east-1b,us-east-1c --nodegroup-name capstoneclusternodesgrp --node-type t2.micro --nodes-min 2 --nodes-max 4 --managed
            fi
  eks_app_deploy:
    docker:
      - image: python:3.7.3-stretch
      
    steps:
      - checkout
      - run:
          name: Install awscli
          command: |
            pip3 install awscli

      - run:
          name: Install aws-iam-authenticator
          command: |
            # curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
            curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
            chmod +x ./aws-iam-authenticator
            mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
            # mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            # echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            # aws-iam-authenticator help

      
      - run:
          name: Install eksctl
          command: |
            # curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            # mv /tmp/eksctl /usr/local/bin
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version


      - run:
          name: Install kubectl
          command: |
            # curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            # chmod +x ./kubectl
            # mv ./kubectl /usr/local/bin/kubectl
            # curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl
            # curl -o kubectl.sha256 https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl.sha256
            # openssl sha1 -sha256 kubectl
            # chmod +x ./kubectl
            # mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            # echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            # kubectl version --short --client
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            
      - run:
          name: deploy the docker container in aws eks cluster
          command: |
            export TERM=xterm
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
            echo "Key Loaded Successfully"
            aws cloudformation list-exports > cluster.txt
            cat cluster.txt
            aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $EKS_CLUSTER_NAME
            echo "eks key load successfull"
            echo "started app deploy...."
            kubectl apply -f eks_app_deploy.yml
            echo "get node details"
            kubectl get nodes
            echo "Get deployment details"
            
            kubectl get deployment
            echo "get pod details with wide option"
            kubectl get pod -o wide
            echo "Echo ide output completed now applying the status app services config"
            kubectl apply -f eks_app_services.yml
            echo "applying finished of app services"
            echo "now get the services"
            kubectl get services
            echo "perform deployment rollback"
            kubectl rollout status deployment/ekscpattonecluster
            kubectl describe svc ekscpattonecluster
            
workflows:
  version:   2.1
  default:
    jobs:
      - lint_check
      - build_docker_app:
          requires: [lint_check]
      - eks_cluster_deploy:
          requires: [build_docker_app]
      - eks_app_deploy:
          requires: []eks_cluster_deploy]
